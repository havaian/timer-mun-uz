stages:
  - deploy

deploy:
  stage: deploy
  tags:
    - shell
  variables:
    PROJECT_DIR: "/home/root/projects/timer-mun-uz"
    # Use fetch instead of none to better handle existing/non-existing directories
    GIT_STRATEGY: fetch
  script:
    - echo "Starting deployment..."
    - |
      if [ ! -d "$PROJECT_DIR" ]; then
        echo "Directory $PROJECT_DIR does not exist, creating..."
        mkdir -p "$PROJECT_DIR"
      fi
    - cd $PROJECT_DIR || { echo "‚ùå Failed to change to project directory"; exit 1; }
    - echo "‚úÖ Setting up repository..."
    # Configure Git to use the CI token for authentication
    - git config --global credential.helper store
    - echo "https://gitlab-ci-token:${CI_JOB_TOKEN}@${GITLAB_REMOTE_URL}" > ~/.git-credentials
    - chmod 600 ~/.git-credentials
    # Check if .git directory exists
    - |
      if [ ! -d ".git" ]; then
        echo "Initializing Git repository..."
        git init
        git remote add origin "https://gitlab-ci-token:${CI_JOB_TOKEN}@${GITLAB_REMOTE_URL}"
      else
        echo "Setting remote URL..."
        git remote set-url origin "https://gitlab-ci-token:${CI_JOB_TOKEN}@${GITLAB_REMOTE_URL}"
      fi
    # Force checkout and pull latest changes
    - echo "üì• Force pulling latest changes from repository..."
    - git fetch --all || { echo "‚ùå Git fetch failed"; exit 1; }
    - git reset --hard origin/main || { echo "‚ùå Git reset failed"; exit 1; }
    - git clean -fdx  # Clean untracked files
    - echo "‚úÖ Deployment completed successfully"
  after_script:
    # Clean up credentials
    - rm -f ~/.git-credentials
    - git config --global --unset credential.helper
    # Reset remote URL to prevent token exposure in logs
    - cd $PROJECT_DIR && git remote set-url origin "https://${GITLAB_REMOTE_URL}" || true
  only:
    - main